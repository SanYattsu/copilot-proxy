---
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
    upgrade: "full"
    state: "latest"

- name: Install required packages
  ansible.builtin.apt:
    name:
      - iptables-persistent
      - ca-certificates
      - curl
      - acl
    state: latest

- name: Create Docker GPG key directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"

- name: Download Docker GPG key
  ansible.builtin.get_url:
    url: "{{ docker_apt_key_url }}"
    dest: /etc/apt/keyrings/docker.asc
    mode: "0644"

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "{{ docker_apt_repository }}"
    state: present
    filename: docker.list
    update_cache: yes

- name: Install Docker packages
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: latest

- name: Configure iptables rules
  ansible.builtin.iptables:
    chain: "{{ item.chain }}"
    protocol: "{{ item.protocol }}"
    source: "{{ item.source | default(omit) }}"
    destination_port: "{{ item.dport | default(omit) }}"
    ctstate: "{{ item.ctstate | default(omit) }}"
    ctorigdst: "{{ item.ctorigdst | default(omit) }}"
    ctorigdstport: "{{ item.ctorigdstport | default(omit) }}"
    jump: "{{ item.jump }}"
  loop:
    - { chain: "INPUT", protocol: "tcp", dport: "22", source: "{{ allowed_network }}", jump: "ACCEPT" }
    - { chain: "INPUT", protocol: "tcp", dport: "{{ socks_external_port }}", source: "{{ allowed_network }}", jump: "ACCEPT" }
    - { chain: "INPUT", protocol: "udp", dport: "{{ socks_external_port }}", source: "{{ allowed_network }}", jump: "ACCEPT" }
    - { chain: "INPUT", protocol: "tcp", dport: "22", jump: "DROP" }
    - { chain: "INPUT", protocol: "tcp", dport: "{{ socks_external_port }}", jump: "DROP" }
    - { chain: "INPUT", protocol: "udp", dport: "{{ socks_external_port }}", jump: "DROP" }
  notify: Save iptables rules

- name: Create service user
  become: true
  ansible.builtin.user:
    name: proxy
    create_home: false
    shell: /sbin/nologin
    groups: [ docker ]

- name: Create proxy directory
  ansible.builtin.file:
    path: /opt/proxy
    state: directory
    mode: "0755"
    owner: proxy
    group: proxy

- name: Copy docker-compose file
  ansible.builtin.template:
    src: proxy.yaml.j2
    dest: /opt/proxy/proxy.yaml
    mode: "0644"
    owner: proxy
    group: proxy

- name: Copy secrets
  ansible.builtin.copy:
    src: .env
    dest: /opt/proxy/.env
    mode: '0600' 
    owner: proxy
    group: proxy

- name: Start proxy service
  become_user: proxy
  community.docker.docker_compose_v2:
    project_src: /opt/proxy
    files:
      - proxy.yaml
    state: present

- name: Configure SSH
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: "^#?LoginGraceTime.*", line: "LoginGraceTime 0" }
    - { regexp: "^#?PasswordAuthentication.*", line: "PasswordAuthentication no" }
  notify:
   - Restart SSH
   - Reboot a machine
